/* Generated by Yosys 0.29 (git sha1 9c5a60eb201, clang 14.0.3 -fPIC -Os) */

(* hdlname = "\\lfsr" *)
(* top =  1  *)
module lfsr(clk_i, reset_i, data_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  (* force_downto = 32'd1 *)
  wire [20:0] _036_;
  (* force_downto = 32'd1 *)
  wire [20:0] _037_;
  input clk_i;
  wire clk_i;
  reg [20:0] count_r;
  output [4:0] data_o;
  wire [4:0] data_o;
  wire red_w;
  input reset_i;
  wire reset_i;
  wire [5:0] state_n;
  reg [5:0] state_r;
  assign _036_[0] = ~count_r[0];
  assign _037_[1] = count_r[1] ^ count_r[0];
  assign _002_ = count_r[1] & count_r[0];
  assign _037_[2] = _002_ ^ count_r[2];
  assign _003_ = ~(count_r[1] & count_r[0]);
  assign _004_ = count_r[2] & ~(_003_);
  assign _037_[3] = _004_ ^ count_r[3];
  assign _005_ = ~(count_r[3] & count_r[2]);
  assign _006_ = _002_ & ~(_005_);
  assign _037_[4] = _006_ ^ count_r[4];
  assign _007_ = _005_ | _003_;
  assign _008_ = count_r[4] & ~(_007_);
  assign _037_[5] = _008_ ^ count_r[5];
  assign _009_ = ~(count_r[5] & count_r[4]);
  assign _010_ = _009_ | _007_;
  assign _037_[6] = ~(_010_ ^ count_r[6]);
  assign _011_ = count_r[6] & ~(_010_);
  assign _037_[7] = _011_ ^ count_r[7];
  assign _012_ = ~(count_r[7] & count_r[6]);
  assign _013_ = _012_ | _009_;
  assign _014_ = _006_ & ~(_013_);
  assign _037_[8] = _014_ ^ count_r[8];
  assign _015_ = _013_ | _007_;
  assign _016_ = count_r[8] & ~(_015_);
  assign _037_[9] = _016_ ^ count_r[9];
  assign _017_ = ~(count_r[9] & count_r[8]);
  assign _018_ = _017_ | _015_;
  assign _037_[10] = ~(_018_ ^ count_r[10]);
  assign _019_ = count_r[10] & ~(_018_);
  assign _037_[11] = _019_ ^ count_r[11];
  assign _020_ = ~(count_r[11] & count_r[10]);
  assign _021_ = _020_ | _017_;
  assign _022_ = _021_ | _015_;
  assign _037_[12] = ~(_022_ ^ count_r[12]);
  assign _023_ = count_r[12] & ~(_022_);
  assign _037_[13] = _023_ ^ count_r[13];
  assign _024_ = ~(count_r[13] & count_r[12]);
  assign _025_ = _024_ | _022_;
  assign _037_[14] = ~(_025_ ^ count_r[14]);
  assign _026_ = count_r[14] & ~(_025_);
  assign _037_[15] = _026_ ^ count_r[15];
  assign _027_ = ~(count_r[15] & count_r[14]);
  assign _028_ = _027_ | _024_;
  assign _029_ = _028_ | _021_;
  assign _030_ = _014_ & ~(_029_);
  assign _037_[16] = _030_ ^ count_r[16];
  assign _031_ = _030_ & count_r[16];
  assign _037_[17] = _031_ ^ count_r[17];
  assign _032_ = ~(count_r[17] & count_r[16]);
  assign _033_ = _032_ | ~(_030_);
  assign _037_[18] = ~(_033_ ^ count_r[18]);
  assign _034_ = count_r[18] & ~(_033_);
  assign _037_[19] = _034_ ^ count_r[19];
  assign _035_ = ~(count_r[19] & count_r[18]);
  assign _000_ = _035_ | _032_;
  assign _001_ = _030_ & ~(_000_);
  assign _037_[20] = _001_ ^ count_r[20];
  assign red_w = state_r[5] ^ state_r[0];
  always @(posedge clk_i)
    if (reset_i) count_r[0] <= 1'h0;
    else count_r[0] <= _036_[0];
  always @(posedge clk_i)
    if (reset_i) count_r[1] <= 1'h0;
    else count_r[1] <= _037_[1];
  always @(posedge clk_i)
    if (reset_i) count_r[2] <= 1'h0;
    else count_r[2] <= _037_[2];
  always @(posedge clk_i)
    if (reset_i) count_r[3] <= 1'h0;
    else count_r[3] <= _037_[3];
  always @(posedge clk_i)
    if (reset_i) count_r[4] <= 1'h0;
    else count_r[4] <= _037_[4];
  always @(posedge clk_i)
    if (reset_i) count_r[5] <= 1'h0;
    else count_r[5] <= _037_[5];
  always @(posedge clk_i)
    if (reset_i) count_r[6] <= 1'h0;
    else count_r[6] <= _037_[6];
  always @(posedge clk_i)
    if (reset_i) count_r[7] <= 1'h0;
    else count_r[7] <= _037_[7];
  always @(posedge clk_i)
    if (reset_i) count_r[8] <= 1'h0;
    else count_r[8] <= _037_[8];
  always @(posedge clk_i)
    if (reset_i) count_r[9] <= 1'h0;
    else count_r[9] <= _037_[9];
  always @(posedge clk_i)
    if (reset_i) count_r[10] <= 1'h0;
    else count_r[10] <= _037_[10];
  always @(posedge clk_i)
    if (reset_i) count_r[11] <= 1'h0;
    else count_r[11] <= _037_[11];
  always @(posedge clk_i)
    if (reset_i) count_r[12] <= 1'h0;
    else count_r[12] <= _037_[12];
  always @(posedge clk_i)
    if (reset_i) count_r[13] <= 1'h0;
    else count_r[13] <= _037_[13];
  always @(posedge clk_i)
    if (reset_i) count_r[14] <= 1'h0;
    else count_r[14] <= _037_[14];
  always @(posedge clk_i)
    if (reset_i) count_r[15] <= 1'h0;
    else count_r[15] <= _037_[15];
  always @(posedge clk_i)
    if (reset_i) count_r[16] <= 1'h0;
    else count_r[16] <= _037_[16];
  always @(posedge clk_i)
    if (reset_i) count_r[17] <= 1'h0;
    else count_r[17] <= _037_[17];
  always @(posedge clk_i)
    if (reset_i) count_r[18] <= 1'h0;
    else count_r[18] <= _037_[18];
  always @(posedge clk_i)
    if (reset_i) count_r[19] <= 1'h0;
    else count_r[19] <= _037_[19];
  always @(posedge clk_i)
    if (reset_i) count_r[20] <= 1'h0;
    else count_r[20] <= _037_[20];
  always @(posedge clk_i)
    if (reset_i) state_r[0] <= 1'h1;
    else if (count_r[20]) state_r[0] <= red_w;
  always @(posedge clk_i)
    if (reset_i) state_r[1] <= 1'h0;
    else if (count_r[20]) state_r[1] <= state_r[0];
  always @(posedge clk_i)
    if (reset_i) state_r[2] <= 1'h0;
    else if (count_r[20]) state_r[2] <= state_r[1];
  always @(posedge clk_i)
    if (reset_i) state_r[3] <= 1'h0;
    else if (count_r[20]) state_r[3] <= state_r[2];
  always @(posedge clk_i)
    if (reset_i) state_r[4] <= 1'h0;
    else if (count_r[20]) state_r[4] <= state_r[3];
  always @(posedge clk_i)
    if (reset_i) state_r[5] <= 1'h0;
    else if (count_r[20]) state_r[5] <= state_r[4];
  assign _036_[20:1] = count_r[20:1];
  assign _037_[0] = _036_[0];
  assign data_o = state_r[4:0];
  assign state_n = { state_r[4:0], red_w };
endmodule
